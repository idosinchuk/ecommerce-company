/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.openapi.generator" version "5.4.0"
    id 'jacoco'
    id "org.sonarqube" version "3.3"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.5'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.5'
    implementation 'org.springframework:spring-web:5.3.17'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation group: 'org.openapitools', name: 'openapi-generator-gradle-plugin', version: '5.4.0'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.5'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.6.6'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.8.4'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.6.6'
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.0.6'
    runtimeOnly 'com.h2database:h2:2.1.210'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.5'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

group = 'com.idosinchuk'
version = '0.0.1-SNAPSHOT'
description = 'ecommerce-company'
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property "sonar.login", "admin"
        // Modify the sonar password before running Sonar
        property "sonar.password", "admin"
        //property "sonar.exclusions", "**/Application.java, **/dto/**"
        property "sonar.projectKey", "ecommerce-company"
        property 'sonar.projectName', 'Eccomerce Company'
        property 'sonar.java.source', 11
        property 'sonar.junit.reportPaths', "$buildDir/results"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.junit.reportsPath", "$buildDir/reports/tests"
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/jacoco/xml/jacoco.xml"
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacoco.exec"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("$buildDir/jacoco/xml/jacoco.xml")
        html.destination file("$buildDir/jacoco/html")
    }
    dependsOn test
}

tasks['sonarqube'].dependsOn jacocoTestReport


openApiGenerate {
    generatorName = "java"
    inputSpec = "$rootDir/specs/openapi.yml".toString()
    outputDir = "$buildDir/generated/sources/openapi".toString()
    configOptions = [
            dateLibrary       : "java8",
            interfaceOnly     : "true",
            singleContentTypes: "true"
    ]
}

compileJava.dependsOn tasks.openApiGenerate

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/sources/openapi/src/main/java"
        }
    }
}